# Use the rust image as the base image for the build stage
FROM rust:latest AS builder

# Copy the Rust-TEOS source code
COPY . /tmp/rust-teos

# Install the dependencies required for building Rust-TEOSd
RUN apt-get update &&\
    apt-get -y --no-install-recommends install libffi-dev libssl-dev musl-tools pkg-config

RUN cd /tmp/rust-teos\
    # Rustfmt is needed to format the grpc stubs generated by tonic.
    && rustup target add x86_64-unknown-linux-musl\
    && rustup component add rustfmt\
    # Cross compile with musl as the target, so teos can run on alpine.
    && RUSTFLAGS='-C target-feature=+crt-static' cargo build --manifest-path=teos/Cargo.toml --locked --release --target x86_64-unknown-linux-musl

# Use a new stage with a smaller base image to reduce image size
FROM alpine:latest

RUN apk update && apk upgrade && apk add --update bash

# UID and GID for the TEOSD user
ENV TEOSD_UID=1001 TEOSD_GID=1001

# Copy the teos binary from the build stage to the new stage
COPY --from=builder\
    /tmp/rust-teos/target/x86_64-unknown-linux-musl/release/teosd\
    /tmp/rust-teos/target/x86_64-unknown-linux-musl/release/teos-cli /usr/local/bin/

# Copy the entrypoint script to the container
COPY docker/entrypoint.sh /entrypoint.sh

# Set the entrypoint script as executable and add running user
RUN chmod +x /entrypoint.sh\
    && addgroup -g ${TEOSD_GID} -S teosd\
    && adduser -S -G teosd -u ${TEOSD_UID} teosd

# Expose the default port used by Rust-TEOSd
EXPOSE 9814/tcp

# Switch user so that we don't run stuff as root
USER teosd

# Create a volume for the TEOS data directory
#VOLUME ["/home/teosd/.teos"]
RUN mkdir /home/teosd/.teos
RUN chown 1001:1001 /home/teosd/.teos

# Start Rust-TEOS when the container starts
ENTRYPOINT [ "/entrypoint.sh" ]
